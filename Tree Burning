/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        if(root == null){
            return 0;
        }

        if(root.left == null && root.right == null){
            return 0;
        }
        
        List<int[]> list = new ArrayList<>();
        traverse(root, list);

        int maxNode = 0;
        for (int[] node : list) {
            maxNode = Math.max(maxNode, Math.max(node[0], node[1]));
        }

        return bfs(list, start, maxNode);
    }

    public void traverse(TreeNode root, List<int[]> list) {
        if (root == null) {
            return;
        }

        if (root.left != null) {
            list.add(new int[] { root.val, root.left.val });
            traverse(root.left, list);
        }

        if (root.right != null) {
            list.add(new int[] { root.val, root.right.val });
            traverse(root.right, list);
        }
    }

    public int bfs(List<int[]> list, int start, int V) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int nums[] : list) {
            int u = nums[0];
            int v = nums[1];

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[V + 1];
        int count = -1;

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int size = queue.size();
            count++;

            for (int i = 0; i < size; i++) {
                int num = queue.poll();

                for (int n : adj.get(num)) {
                    if (!visited[n]) {
                        queue.add(n);
                        visited[n] = true;
                    }
                }
            }
        }

        return count;
    }
}
