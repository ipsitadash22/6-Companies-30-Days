class Node{
     int row ;
     int col;
     int tm;
     Node(int _row , int _col ,int _tm){
        this.row = _row;
        this.col = _col;
        this.tm = _tm;
     }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] visited = new int[n][m];
        Queue<Node> queue = new LinkedList<>();
        int count = 0;

        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(grid[i][j] == 2){
                    queue.add(new Node(i , j , 0));
                    visited[i][j] = 2;
                }else{
                    visited[i][j] = 0;
                }

                if(grid[i][j] == 1){
                    count++;
                }
            }
        }

        int[] drow = {1,0,-1,0};
        int[] dcol = {0,-1 ,0 ,1};
        int tm = 0;
        int Count = 0;

        while(!queue.isEmpty()){
            Node node = queue.poll();
            int row = node.row;
            int col = node.col;
            int dist = node.tm;
            tm = Math.max(dist , tm);

            for(int i=0 ; i<4 ; i++){
                int Row = row + drow[i];
                int Col = col + dcol[i];

                if(Row >= 0 && Row < n && Col>=0 && Col<m && visited[Row][Col] == 0 && grid[Row][Col] == 1){
                    visited[Row][Col] = 2;
                    queue.add(new Node(Row , Col , tm+1));
                    Count++;
                }
            }
        }

        if(count != Count){
            return -1;
        }

        return tm;
    }
}
