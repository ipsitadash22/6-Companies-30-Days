class LRUCache {

    HashMap<Integer , Integer> map;
    int capacity;
    Deque<Integer> queue;

    public LRUCache(int capacity) {
        map = new HashMap<>();
        this.capacity = capacity;
        queue = new LinkedList<>();
    }
    
    public int get(int key) {
        if(!map.containsKey(key)){
            return -1;
        }

        queue.remove(key);
        queue.addFirst(key);
        return map.get(key);
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            map.put(key , value);
            queue.remove(key);
            queue.addFirst(key);
        }else{
            if(capacity == map.size()){
                int num = queue.removeLast();
                map.remove(num);
            }

            map.put(key , value);
            queue.addFirst(key);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
