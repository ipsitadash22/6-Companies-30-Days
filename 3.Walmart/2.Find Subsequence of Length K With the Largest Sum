class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        if(nums.length < k){
            return new int[]{};
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int num : nums){
            if(pq.size() == k && pq.peek() < num){
                pq.poll();
                pq.add(num);
            }else if(pq.size() < k){
                pq.add(num);
            }
        }

        HashMap<Integer , Integer> map = new HashMap<>();
        while(!pq.isEmpty()){
            int num = pq.poll();
            map.put(num , map.getOrDefault(num , 0)+1);
        }

        int[] result = new int[k];
        int index = 0;
        for(int i=0 ; i<nums.length ; i++){
            if(map.containsKey(nums[i])){
                result[index++] = nums[i];
                if(map.get(nums[i]) > 1){
                    map.put(nums[i] , map.get(nums[i])-1);
                }else{
                    map.remove(nums[i]);
                }
            }
        }

        return result;
    }
}
