class Solution {
    public int numFriendRequests(int[] ages) {
        int count = 0;
        Arrays.sort(ages);

        for(int i=0 ; i<ages.length ; i++){
            if(ages[i] < 15){
                continue;
            }

            int minAge = (int)(0.5*ages[i] + 7);
            int left = binarySearchLeft(ages , minAge+1);
            int right = binarySearchRight(ages , ages[i]);

            if(left <= right){
                count += (right-left+1);
                count--;
            }
        }

        return count;
        
    }
    public int binarySearchLeft(int[] ages , int min){
        int left = 0;
        int right = ages.length-1;

        while(left <= right){
            int mid = left + (right-left)/2;

            if(ages[mid] >= min){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }

        return left;
    }

    public int binarySearchRight(int[] ages , int max){
        int left = 0;
        int right = ages.length-1;

        while(left <= right){
            int mid = left + (right-left)/2;

            if(ages[mid] <= max){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }

        return right;
    }
}
